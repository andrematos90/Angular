
explicação:


No Angular, a comunicação entre componentes pais e filhos pode ser realizada através da emissão de eventos pelos componentes filhos. Isso geralmente envolve a utilização do decorador @Output e a criação de um EventEmitter. Aqui estão os passos básicos para entender como funciona a emissão de eventos de componentes filhos para componentes pais:

@Output Decorator:

Em um componente filho, você pode criar uma propriedade com o decorador @Output.
O @Output é usado para expor um evento que pode ser capturado pelo componente pai.

import { Component, EventEmitter, Output } from '@angular/core';


  template: 
  '<button (click)="emitirEvento()">Clique-me</button>',

  classe: 
export class FilhoComponent {
  @Output() meuEvento = new EventEmitter<string>();

  emitirEvento() {
    this.meuEvento.emit('Dados do evento');
  }
}

Emissão de Evento:

No exemplo acima, o método emitirEvento() é chamado quando o botão é clicado.
Ele emite um evento usando this.meuEvento.emit('Dados do evento').

Recebendo o Evento no Componente Pai:

No componente pai, você pode usar a diretiva (eventoFilho) para capturar o evento emitido pelo componente filho.

import { Component } from '@angular/core';


  template: '<app-filho (meuEvento)="lidarComEvento($event)"></app-filho>',


  classe:

export class PaiComponent {
  lidarComEvento(dados: string) {
    console.log('Evento recebido do filho:', dados);
  }
}
Aqui, (meuEvento) é o nome do evento que estamos capturando, e lidarComEvento($event) é o método no componente pai que será chamado quando o evento for emitido.
$event:

O objeto $event contém os dados que foram passados durante a emissão do evento no componente filho.
No exemplo acima, é uma string, mas pode ser qualquer tipo de dado.


Integrando Componentes:

Finalmente, no template do componente pai, você integra o componente filho usando <app-filho></app-filho> e captura o evento desejado.
Essa é uma maneira de permitir a comunicação entre componentes pais e filhos no Angular através da emissão de eventos. Essa abordagem é particularmente útil quando os componentes estão aninhados e precisam se comunicar de forma eficiente.


PASSOS:

Passo 1: No Componente Filho
Importar Módulos Necessários:

Importe Component, EventEmitter e Output do Angular.
(se for apenas dados é necessários apenas o Output)

import { Component, EventEmitter, Output } from '@angular/core';
Criar Componente:

Defina o componente filho.


  template: '<button (click)="emitirEvento()">Clique-me</button>'

export class FilhoComponent {
  // ...
}

Criar Propriedade de Evento:

Use o decorador @Output para criar uma propriedade que será um evento.

@Output() meuEvento = new EventEmitter<string>();

Emitir Evento:

Crie um método para emitir o evento quando necessário.

emitirEvento() {
  this.meuEvento.emit('Dados do evento');
}

Passo 2: No Componente Pai
Importar Módulos Necessários:

Importe Component do Angular.

import { Component } from '@angular/core';

Criar Componente:

Defina o componente pai.


  template: '<app-filho (meuEvento)="lidarComEvento($event)"></app-filho>',

export class PaiComponent {
  // ...
}

Lidar com o Evento:

Crie um método no componente pai para lidar com o evento emitido.

lidarComEvento(dados: string) {
  console.log('Evento recebido do filho:', dados);
}

Integrar Componentes:

No template do componente pai, insira o componente filho e capture o evento.

<app-filho (meuEvento)="lidarComEvento($event)"></app-filho>

Resultado Final:
Agora, quando o botão no componente filho é clicado, o evento é emitido, capturado pelo componente pai, e o método lidarComEvento é chamado com os dados do evento. Esse é um exemplo básico de como os eventos podem ser usados para a comunicação de componentes no Angular.
















